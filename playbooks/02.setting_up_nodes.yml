---
- hosts: all
  become: yes
  vars_files:
  - vars/cluster_settings
  vars:
    selinux_policy: targeted
    selinux_state: permissive
    # https://istio.io/latest/docs/setup/platform-setup/prerequisites/
    istio_prereq_modules:
      - ip6table_mangle
      - ip6table_nat
      - ip6table_raw
      - iptable_mangle
      - iptable_nat
      - iptable_raw
      - xt_REDIRECT
      - xt_connmark
      - xt_conntrack
      - xt_mark
      - xt_owner
      - xt_tcpudp
      - bridge
      - ip6_tables
      - ip_tables
      - nf_conntrack
      # - nf_conntrack_ipv4
      # - nf_conntrack_ipv6
      - nf_nat
      # - nf_nat_ipv4
      # - nf_nat_ipv6
      # - nf_nat_redirect
      - x_tables
      - iptable_filter

  tasks:
  - name: Enable SELinux in permissive mode
    block:
    - include_role:
        name: linux-system-roles.selinux
    rescue:
    # Fail if failed for a different reason than selinux_reboot_required
    - name: handle errors
      fail:
        msg: linux-system-roles.selinux failed
      when: not selinux_reboot_required
    - name: restart the system
      reboot:
        msg: "linux-system-roles: the update requires reboot"
    - name: reapply linux-system-roles
      include_role:
        name: linux-system-roles.selinux

  - name: Letting iptables see bridged traffic (1/2)
    copy:
      content: |
        overlay
        br_netfilter
      dest: /etc/modules-load.d/k8s.conf
    notify: Add modules into the kernel

  - name: Letting iptables see bridged traffic (2/2)
    copy:
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
      dest: /etc/sysctl.d/k8s.conf
    notify: Reload kernel parameters

    # https://istio.io/latest/docs/setup/platform-setup/prerequisites/
  - name: Load modules for istio
    copy:
      content: "{{ istio_prereq_modules | join('\n') }}"
      dest: /etc/modules-load.d/istio.conf
    notify: Add istio prerequisite modules into the kernel

  - name: Install prerequisite packages
    yum:
        name: "{{ packages }}"
        state: latest
    vars:
      packages:
      - yum-utils
      # device-mapper-persistent-data, lvm2 => no need in EL8
      - iproute-tc
      - bash-completion
  
  - name: Identify the latest CRI-O release (1/2)
    uri:
      url: https://api.github.com/repos/cri-o/cri-o/releases/latest
      body_format: json
      return_content: yes
    register: crio_release_json

  - name: Identify the latest CRI-O release (2/2)
    set_fact:
      latest_crio_version_minor: "{{ crio_release_json.json.tag_name | regex_replace('^v(\\d+)\\.(\\d+).*','\\1.\\2') }}"

  - name: Override string latest with actual latest version string
    set_fact:
      crio_version: "{{ latest_crio_version_minor }}"
    when: 
      - crio_version is defined
      - crio_version | lower == "latest"

  - name: Determine the version of CRI-O to install
    set_fact:
      crio_version_minor: "{{ crio_version | default(latest_crio_version_minor, true) }}"

  - name: Add cri-o repo (1/2)
    get_url:
      url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/devel:kubic:libcontainers:stable.repo
      dest: /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo

  - name: Add cri-o repo (2/2)
    get_url:
      url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ crio_version_minor }}/CentOS_8/devel:kubic:libcontainers:stable:cri-o:{{ crio_version_minor }}.repo
      dest: /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:{{ crio_version_minor }}.repo

  - name: Install CRI-O

    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - cri-o
      - cri-tools
    notify: Restart and enable services

  - name: Override default CRI-O subnet
    replace:
      path: /etc/cni/net.d/100-crio-bridge.conf
      regexp: '10\.85\.0\.0\/16'
      replace: '{{ pod_network_cidr }}'

  - name: Adding repository details in Kubernetes repo file.
    copy:
      content: |
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        exclude=kubelet kubeadm kubectl
      dest: /etc/yum.repos.d/kubernetes.repo
  
  - name: Install kubernetes
    yum:
      name: "{{ packages }}"
      state: latest
      disable_excludes: kubernetes
      # workaround for update problem: https://github.com/kubernetes/kubernetes/issues/92463#issuecomment-685400015
      exclude:
        - kubelet-1.18.4-0
        - kubelet-1.17.7-0
        - kubelet-1.16.11-0
    vars:
      packages:
      - kubelet
      - kubeadm
      - kubectl
    notify: Restart and enable services

  - name: Identify the latest flanneld (1/2)
    uri:
      url: https://api.github.com/repos/flannel-io/flannel/releases/latest
      body_format: json
      return_content: yes
    register: flannel_release_json
    when: network_addon == "flannel"

  - name: Identify the latest flanneld (2/2)
    set_fact:
      latest_flannel_release: "{{ flannel_release_json.json.tag_name }}"
    when: network_addon == "flannel"

  - name: Download the latest flanneld
    get_url:
      url: "https://github.com/flannel-io/flannel/releases/download/{{ latest_flannel_release }}/flannel-{{ latest_flannel_release }}-linux-amd64.tar.gz"
      dest: "/root"
    when: network_addon == "flannel"

  - name: Extract flanneld to /opt/bin
    shell: |
      mkdir -p /opt/bin
      tar -xvzf /root/flannel-{{ latest_flannel_release }}-linux-amd64.tar.gz -C /opt/bin flanneld
      chown root.root /opt/bin/flanneld

  # https://github.com/kubernetes/kubernetes/issues/56850
  - name: Enable cpu and memory accounting to fix cgroup issue#56850 (1/2)
    file:
      path: /etc/systemd/system/kubelet.service.d
      state: directory

  # https://github.com/kubernetes/kubernetes/issues/56850
  - name: Enable cpu and memory accounting to fix cgroup issue#56850 (2/2)
    copy:
      content: |
        [Service]
        CPUAccounting=true
        MemoryAccounting=true
      dest: /etc/systemd/system/kubelet.service.d/11-cgroups.conf
    notify:
      - Reload systemd units
      - Restart and enable services
  
  handlers:
  - name: Add modules into the kernel
    modprobe:
      name: "{{ item }}"
      state: present
    loop:
      - br_netfilter
      - overlay

  - name: Add istio prerequisite modules into the kernel
    modprobe:
      name: "{{ item }}"
      state: present
    loop: "{{ istio_prereq_modules }}"

  - name: Reload kernel parameters
    command: sysctl --system

  - name: Reload systemd units
    systemd:
      daemon_reload: yes

  - name: Restart and enable services
    service:
      name: "{{ item }}"
      state: restarted
      enabled: yes
    loop:
    - crio
    - kubelet
